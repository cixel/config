# Snippets for Go

priority -50

# when to abbriviate and when not?
# b doesn't work here, because it ignores whitespace
# optional local name?
snippet /^import/ "Import declaration" r
import (
	"${1:package}"
)
endsnippet

snippet cl "fmt.Println" b
fmt.Println(${1:value})
endsnippet

snippet cf "fmt.Printf" b
fmt.Printf("${1:value}")
endsnippet

snippet ck "printAst" b
printAst(${1:value})
endsnippet

snippet /^package/ "Package declaration" r
// Package $1 provides ...
package ${1:main}
endsnippet

# Mostly converted from: https://github.com/AlanQuatermain/go-tmbundle
snippet /^cons/ "Constants declaration" r
const (
	${1:constant}${2/(.+)/ /}${2:type} = ${0:value}
)
endsnippet

snippet /^con/ "Constant declaration" r
const ${1:name}${2/(.+)/ /}${2:type} = ${0:value}
endsnippet

snippet iota "Iota constant generator" b
const (
	${1:constant}${2/(.+)/ /}${2:type} = iota
)
endsnippet

snippet struct "Struct declaration" b
type ${1:Struct} struct {
	${0:${VISUAL}}
}
endsnippet

snippet interface "Interface declaration" b
type ${1:Interface} interface {
	${0:${VISUAL}}
}
endsnippet

# statements
snippet for "For loop" b
for ${1:condition}${1/(.+)/ /}{
	${0:${VISUAL}}
}
endsnippet

snippet fori "Integer for loop" b
for ${1:i} := 0; $1 < ${2:N}; $1++ {
	${0:${VISUAL}}
}
endsnippet

snippet forr "For range loop" b
for ${2:name} := range ${1:collection} {
	${0:${VISUAL}}
}
endsnippet

snippet if "If statement" b
if ${1:condition}${1/(.+)/ /}{
	${0:${VISUAL}}
}
endsnippet

snippet switch "Switch statement" b
switch ${1:expression}${1/(.+)/ /}{
case${0}
}
endsnippet

snippet select "Select statement" b
select {
case${0}
}
endsnippet

snippet case "Case clause" b
case ${1:condition}:
	${0:${VISUAL}}
endsnippet

snippet default "Default clause" b
default:
	${0:${VISUAL}}
endsnippet

# functions
snippet /^main/ "Main function" r
func main() {
	${0:${VISUAL}}
}
endsnippet

snippet /^meth/ "Method" r
func (${1:receiver} ${2:type}) ${3:name}(${4:params})${5/(.+)/ /}${5:type} {
	${0:${VISUAL}}
}
endsnippet

snippet func "Function" b
func ${1:name}(${2:params})${3/(.+)/ /}${3:type} {
	${0:${VISUAL}}
}
endsnippet

snippet funch "HTTP handler" b
func ${1:handler}(${2:w} http.ResponseWriter, ${3:r} *http.Request) {
	${0:${VISUAL}}
}
endsnippet

# types and variables
snippet map "Map type" b
map[${1:keytype}]${2:valtype}
endsnippet

snippet : "Variable declaration :=" b
${1:name} := ${0:value}
endsnippet

snippet var "Variable declaration" b
var ${1:name}${2/(.+)/ /}${2:type}${3: = ${0:value}}
endsnippet

snippet vars "Variables declaration" b
var (
	${1:name}${2/(.+)/ /}${2:type}${3: = ${0:value} }
)
endsnippet

snippet json "JSON field"
\`json:"${1:displayName}"\`
endsnippet

# vim:ft=snippets:

# error handling
snippet err "Basic error handling" b
if err != nil {
}
endsnippet

snippet copyright "Go Copyright statement" b
// Copyright 2018 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.
endsnippet

# TODO look into how i can put these into directory-specific
# snippets, so they don't apply globally for all go files i'm in

snippet li "Log info" b
config.Log.Info(${1:msg})
endsnippet

snippet lif "Log infof" b
config.Log.Infof(${1:msg})
endsnippet

snippet lw "Log warn" b
config.Log.Info(${1:msg})
endsnippet

snippet lwf "Log warnf" b
config.Log.Infof(${1:msg})
endsnippet

snippet ld "Log debug" b
config.Log.Debug(${1:msg})
endsnippet

snippet ldf "Log debugf" b
config.Log.Debugf(${1:msg})
endsnippet

snippet lt "Log trace" b
config.Log.Trace(${1:msg})
endsnippet

snippet ltf "Log tracef" b
config.Log.Tracef(${1:msg})
endsnippet

snippet le "Log error" b
config.Log.Error(${1:msg})
endsnippet

snippet lef "Log errorf" b
config.Log.Errorf(${1:msg})
endsnippet

snippet sample "sample app template"
package main

import (
	"log"
	"net/http"
)

func main() {
	http.HandleFunc("/test", func(w http.ResponseWriter, r *http.Request) {
		input := r.URL.Query().Get("input")
		_, _ = w.Write([]byte(input))
	})

	log.Print("listening on :8080")
	log.Fatal(http.ListenAndServe("127.0.0.1:8080", nil))
}
endsnippet

snippet ssample "https sample app template"
package main

import (
	"log"
	"net/http"
)

func main() {
	http.HandleFunc("/test", func(w http.ResponseWriter, r *http.Request) {
		input := r.URL.Query().Get("input")
		_, _ = w.Write([]byte(input))
	})

	log.Print("listening on :8080")
	// go run ~/golang/src/crypto/tls/generate_cert.go --rsa-bits 1024 --host 127.0.0.1,::1,localhost --ca --start-date "Jan 1 00:00:00 1970" --duration=1000000h
	log.Fatal(http.ListenAndServeTLS("127.0.0.1:8080", "cert.pem", "key.pem", nil))
}
endsnippet

snippet fix "fixme"
// FIXME(ehden):
endsnippet

snippet todo "todo"
// TODO(GO-${1:ticket}):
endsnippet

snippet note "note"
// NOTE(ehden):
endsnippet

snippet ccr "Contrast Copyright" b
// Copyright Â© 2020 Contrast Security, Inc.
// See https://www.contrastsecurity.com/enduser-terms-0317a for more details.
endsnippet

snippet fortest "test table loop" b
for name, test := range tests {
	t.Run(name, func(t *testing.T) {
	})
}
endsnippet
